{"version":3,"sources":["home.css","../scss/app/_base.scss","../scss/app/gridle/_mixins.scss","../scss/app/_vars.scss","../scss/utils/_mix.clearfix.scss","../scss/home.scss"],"names":[],"mappings":"AAAA;;kCAEiC;AACjC;;;;;;;;IAQG;AACH;;;;;;;IAOG;AACH;;;;;;IAMG;AACH;;;;;IAKG;AACH;;;;;IAKG;AACH;;;;;;IAMG;AACH;;;;;;IAMG;AACH;;;;;;IAMG;AACH;;;;;;;IAOG;AACH;;;;;;IAMG;AACH;;;;;;IAMG;AACH;;;;IAIG;AACH;;IAEG;AACH;;IAEG;AACH;;IAEG;AACH;;IAEG;AACH;;IAEG;AACH;;;;;IAKG;AACH;;IAEG;AACH;;IAEG;AACH;;;;IAIG;AACH;;;;;IAKG;AACH;;kCAEiC;AACjC;;kCAEiC;AACjC;;kCAEiC;ACrIjC;EACC,iBAAe;EDuIf;AErBI;EDhHH,iBAAe;EDwIhB;AEbG;ED9HJ;IAGE,iBAAe;ID4Id;EACF;AC3IA;EACC,WAAS;EACT,WAAS;EACT,oBAAkB;EAClB,gBAAc;EACd,aAAW;ED6IZ;AC3IA;EACC,iBAAe;EACf,2DAAsB;EACtB,kBAAgB;EAChB,qBEVY;EHuJb;;AIjJC;GACC,SAAQ;EJoJV;AInJE;EACC,cAAY;EACZ,gBAAc;EJqJjB;AInJE;EAAU,aAAW;EJsJvB;;AKtKD;EACC,cAAY;EACZ,iBAAe;EACf,wBAAsB;ELyKtB","file":"home.css","sourcesContent":["/*///////////////////////////////\n// CONFIG                      //\n///////////////////////////////*/\n/**\n * Str replace\n *\n * @param {string}  $string    String that you want to replace\n * @param {string}  $substr    String that is to be replaced by `$newsubstr`\n * @param {string}  $newsubstr String that replaces `$substr`\n * @param {number*} $all       Flag for replaceing all (1+) or not (0)\n * @return {string}\n */\n/**\n * Map set\n *\n * @param \tMap \t$map \t\tThe map to use\n * @param \tString \t$key \t\tThe key to update\n * @param \tMixed \t$value \t\tThe new value\n * @return \tMap \t\t\tThe new map\n */\n/**\n * Get the column width in percent for the global or a specific context\n *\n * @param \tint \t\t$columns \t\t\t\t\tThe number of columns to calculate\n * @param \tint \t\t$context : $gridle-columns-count \t \tThe context to use\n * @return \tpercentage \t\t\t\t\t\t\tThe width in percent\n */\n/**\n *  Get a state map\n *\n * @param \tstring \t\t$name \t\tThe name of the state to get\n * @return \tmap \t\t\t\tA state map object\n */\n/**\n * Check if a state exist :\n *\n * @param \tstring \t\t$name \t\tThe name of the state to check\n * @return \tBoolean \t\t\ttrue is exist\n */\n/**\n * Get the media queries variables :\n *\n * @param \tint \t\t$index \t \tThe media query indes\n * @param \tString \t\t$var \t\tThe media query variable name\n * @return \tString|int \t\t\tThe variable value\n */\n/**\n * Get a variable\n *\n * @param \tString \t\t$varName \t\t\t\tThe variable name\n * @param  \tString \t\t$stateMap-or-stateName \t \tThe state name or a map state value\n * @return \tMixed \t\t\t\t\t\t\tThe finded value\n */\n/**\n * Set a variable in a state\n * @param \tMixed $stateName-or-stateIndex \tThe state name of state index\n * @param  \tString $var                    \t\tVariable name to assign\n * @param  \tMixed $newValue          \t\tThe new value to assign\n * @return \tList                         \t\t\tThe states list (full)\n */\n/**\n * Generate a column\n *\n * @param \tString \t\t$name \t\t\tThe column name (often count)\n * @param \tint \t\t$columns \t\tThe column count that the column will take\n * @param \tint \t\t$context \t\tThe context on witch the with will be calculed\n * @param \tBoolean \t$generateClasses \tSet if the column has to be generated in css\n */\n/**\n * Generate classname\n *\n * @param \tList \t\t$parrern \tThe pattern to use to generate classname\n * @param \tString \t\t$state \t\tThe state\n * @param \tint \t\t$count \t\tThe column count\n */\n/**\n * Get the media query for a particular state, or with, etc...\n *\n * @param \tMixed \t\t$state-or-min-width \t\tThe state name of the min with\n * @param \tMixed \t\t$max-width \t\t\tThe max width if first param is a min width\n * @return \tString \t\t\t\t\t\tThe media query string without the @media\n */\n/**\n * Get states count\n * \n * @return \tint \tThe number of states defined\n */\n/**\n * Setup\n */\n/**\n *  Register a clear each class\n */\n/**\n * Register a special class\n */\n/**\n * Register default states\n */\n/**\n * Register default mobile first states :\n */\n/**\n * Set the debug device (not used for now)\n * \n * @param \tString \t\t$state \t\tThe state to update\n * @para m \tString \t\t$device \tThe device to use (iphone, etc...)\n */\n/**\n * Parent clear each\n */\n/**\n * Vertical align :\n */\n/**\n * Show inline\n *\n * @param \tString \t\t$state \t\tThe state name\n */\n/**\n * Generate a custom class for all the states\n *\n * @param \tlist \t$pattern \t\tThe name pattern of the class\n * @param \tlist \t$statesNames \t\tThe states names to generate\n */\n/*///////////////////////////////\n// SPECIAL COLUMNS             //\n///////////////////////////////*/\n/*///////////////////////////////\n// CLEAR CLASSES               //\n///////////////////////////////*/\n/*///////////////////////////////\n// STATES                      //\n///////////////////////////////*/\nhtml {\n  font-size: 16px;\n}\nhtml.tablet html {\n  font-size: 15px;\n}\n@media screen and (min-width: 36.063em) and (max-width: 64em) {\n  html {\n    font-size: 15px;\n  }\n}\nhtml, html body {\n  margin: 0;\n  height: 0;\n  position: relative;\n  display: block;\n  width: 100%;\n}\nhtml body {\n  font-size: 100%;\n  font-family: Helvetica Neue, Helvetica, Arial, sans-serif;\n  font-weight: 300;\n  background: #FDFDFD;\n}\n\n.clearfix, .clfx {\n  *zoom: 1;\n}\n.clearfix:before, .clearfix:after, .clfx:before, .clfx:after {\n  content: \" \";\n  display: table;\n}\n.clearfix:after, .clfx:after {\n  clear: both;\n}\n\n.slider {\n  color: white;\n  font-size: 2rem;\n  background-color: #222;\n}\n\n/*# sourceMappingURL=home.css.map */\n",null,null,null,null,null]}